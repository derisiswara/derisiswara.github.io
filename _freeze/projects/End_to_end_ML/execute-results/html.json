{
  "hash": "6c24cbfe9675577852dd89a290901f54",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"End To End Machine Learning (R, Python, Quarto, Shiny, GitHub, Posit Connect)\"\ndescription: \"Tutorial on building a machine learning application using R, Python, Quarto, Shiny, GitHub, and Posit Connect\"\nauthor: Deri Siswara\ndate: 4/20/2025 \nimage: img/end_to_end.png\ncitation: true\nbibliography: biblio.bib\nexecutable: \n  warning: false\n  message: false\ncategories:\n  - Teaching\n  - Python\n  - R\n  - Dashboard\n  - Machine Learning\n---\n\n\n\n\n<span class=\"listing-btn-group\">\n<a href=\"https://01965396-054c-21e8-4395-ba46cc5b7b37.share.connect.posit.cloud/\" class=\"btn\" role=\"button\">{{< fa box >}} App R </a>\n<a href=\"https://github.com/derisiswara/Aplikasi-Mendiagnosa-Penyakit-Arteri-Koroner-dengan-R-Shiny\" class=\"btn\" role=\"button\">{{< fa brands github >}} App R Code </a>\n<a href=\"https://019653e4-e0ca-c5cd-61c9-227030eba27f.share.connect.posit.cloud/\" class=\"btn\" role=\"button\">{{< fa box >}} App Python </a>\n<a href=\"https://github.com/derisiswara/Aplikasi-Mendiagnosa-Penyakit-Arteri-Koroner-dengan-Python-Shiny\" class=\"btn\" role=\"button\">{{< fa brands github >}} App Python Code</a>\n</span>\n\nTutorial ini akan membahas tentang bagaimana cara membuat aplikasi machine learning dengan menggunakan kombinasi R, Python, Quarto, Shiny, GitHub, dan Posit Connect. Tutorial ini juga akan membahas tentang bagaimana cara mengintegrasikan semua komponen tersebut untuk membuat aplikasi machine learning yang dapat digunakan oleh pengguna lain.\n\n## Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- read.csv(\"data/heart.csv\")\nhead(df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age sex cp trestbps choi fbs restecg thalach exang oldpeak slope ca thai num\n1  63   1  1      145  233   1       2     150     0     2.3     3  0    6   0\n2  67   1  4      160  286   0       2     108     1     1.5     2  3    3   1\n3  67   1  4      120  229   0       2     129     1     2.6     2  2    7   1\n4  37   1  3      130  250   0       0     187     0     3.5     3  0    3   0\n5  41   0  2      130  204   0       2     172     0     1.4     1  0    3   0\n6  56   1  2      120  236   0       0     178     0     0.8     1  0    3   0\n```\n\n\n:::\n:::\n\n\n\n\n### Keterangan Data\n\n| No. | Variabel | Tipe / Satuan | Nilai /Kategori (Ter­definisi) | Arti Klinis singkat |\n|-------------|-------------|-------------|----------------------|-------------|\n| 1 | **age** | Numerik (tahun) | ± 29 – 77 | Usia pasien; faktor risiko kardiovaskular meningkat seiring bertambahnya usia. |\n| 2 | **sex** | Biner | 1 = laki‑laki, 0 = perempuan | Perbedaan hormonal & anatomi memengaruhi kejadian penyakit jantung. |\n| 3 | **cp** | Kategorik (1‑4) | 1 = angina tipikal 2 = angina atypical 3 = nyeri non‑angina 4 = asimptomatik | Jenis nyeri membantu menilai risiko penyakit arteri koroner. |\n| 4 | **trestbps** | Numerik (mm Hg) | ± 90 – 200 | Tekanan darah istirahat tinggi meningkatkan beban jantung. |\n| 5 | **chol** | Numerik (mg/dL) | ± 120 – 564 | Kadar kolesterol tinggi berkaitan dengan aterosklerosis. |\n| 6 | **fbs** | Biner | 1 = gula puasa \\> 120 mg/dL, 0 = tidak | Hiperglikemia kronis mempercepat kerusakan pembuluh darah. |\n| 7 | **restecg** | Kategorik (0‑2) | 0 = normal 1 = ST‑T abnormal 2 = LVH | Abnormalitas EKG istirahat menandakan gangguan listrik jantung awal. |\n| 8 | **thalach** | Numerik (bpm) | ± 60 – 202 | Denyut jantung maksimum saat tes; indikasi kapasitas aerobik & iskemia. |\n| 9 | **exang** | Biner | 1 = angina saat latihan, 0 = tidak | Nyeri dada saat treadmill → iskemia terinduksi stres. |\n| 10 | **oldpeak** | Numerik (mV) | 0.0 – 6.2 | Besar depresi ST; semakin besar → iskemia lebih berat. |\n| 11 | **slope** | Kategorik (1‑3) | 1 = up‑sloping 2 = flat 3 = down‑sloping | Down‑sloping paling berkorelasi dengan CAD. |\n| 12 | **ca** | Numerik diskret (0‑3) | 0, 1, 2, 3 | Jumlah pembuluh besar tersumbat; indikator keparahan. |\n| 13 | **thal** | Kategorik (3/6/7) | 3 = normal 6 = defek tetap 7 = defek reversibel | Defek reversibel → iskemia; defek tetap → infark lama. |\n| 14 | **num** | Biner (label) | 0 = \\< 50 % stenosis 1 = ≥ 50 % stenosis | Diagnosa penyakit arteri koroner signifikan (target model). |\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- transform(\n  df1,\n  age=as.integer(age),\n  sex=as.factor(sex),\n  cp=as.factor(cp),\n  trestbps=as.integer(trestbps),\n  choi=as.integer(choi),\n  fbs=as.factor(fbs),\n  restecg=as.factor(restecg),\n  thalach=as.integer(thalach),\n  exang=as.factor(exang),\n  oldpeak=as.numeric(oldpeak),\n  slope=as.factor(slope),\n  ca=factor(ca,labels=c(\"0\",\"1\",\"2\",\"3\")),\n  thai=factor(thai,labels=c(\"3\",\"6\",\"7\")),\n  num=as.factor(num)\n)\n\nhead(df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age sex cp trestbps choi fbs restecg thalach exang oldpeak slope ca thai num\n1  63   1  1      145  233   1       2     150     0     2.3     3  0    6   0\n2  67   1  4      160  286   0       2     108     1     1.5     2  3    3   1\n3  67   1  4      120  229   0       2     129     1     2.6     2  2    7   1\n4  37   1  3      130  250   0       0     187     0     3.5     3  0    3   0\n5  41   0  2      130  204   0       2     172     0     1.4     1  0    3   0\n6  56   1  2      120  236   0       0     178     0     0.8     1  0    3   0\n```\n\n\n:::\n:::\n\n\n\n\n## Fitting Model di R\n\n**Catatan: EDA dan Hyperparameter tuning tidak ditampilkan di sini. Kedepannya, EDA dan Hyperparameter tuning perlu dilakukan karena bagian dari proses pemodelan machine learning yang dapat meningkatkan akurasi model. Namun, untuk keperluan tutorial ini, EDA dan Hyperparameter tuning tidak ditampilkan.**\n\nDi R, kita dapat menggunakan package `tidymodels` untuk fitting model. Package ini merupakan koleksi dari beberapa package yang saling terintegrasi untuk memudahkan kita dalam melakukan pemodelan machine learning.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n:::\n\n\n\n\n### Algoritma Regresi Logistik\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ────────────────────────────────────────────────────────────────────────────────\n# 1. Pustaka & reproducibility\nset.seed(26)\n\n# ────────────────────────────────────────────────────────────────────────────────\n# 2. Train–test split (stratified)\n# ────────────────────────────────────────────────────────────────────────────────\nsplit_obj  <- initial_split(df1, prop = 0.75, strata = num)   # num = label biner\ntrain_data <- training(split_obj)\ntest_data  <- testing(split_obj)\n\n# ────────────────────────────────────────────────────────────────────────────────\n# 3. Recipe (praproses fitur)\n# ────────────────────────────────────────────────────────────────────────────────\nheart_rec <- recipe(num ~ ., data = train_data) %>% \n  step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%  # encode factor → 0/1\n  step_zv(all_predictors())                                # hilangkan variabel var. 0\n# *Jika data sudah siap, cukup recipe(num ~ ., data = train_data)\n\n# ────────────────────────────────────────────────────────────────────────────────\n# 4. Spesifikasi model regresi logistik\n# ────────────────────────────────────────────────────────────────────────────────\nlog_spec <- \n  logistic_reg() %>%        # default = tanpa regularisasi, link logit\n  set_engine(\"glm\") %>%     # backend base-R glm()\n  set_mode(\"classification\")\n\n# ────────────────────────────────────────────────────────────────────────────────\n# 5. Workflow\n# ────────────────────────────────────────────────────────────────────────────────\nlog_wf <- workflow() %>% \n  add_recipe(heart_rec) %>% \n  add_model(log_spec)\n\n# ────────────────────────────────────────────────────────────────────────────────\n# 6. Fit model\n# ────────────────────────────────────────────────────────────────────────────────\nlog_fit <- fit(log_wf, data = train_data)\n\n# ────────────────────────────────────────────────────────────────────────────────\n# 7. Prediksi & evaluasi\n# ────────────────────────────────────────────────────────────────────────────────\nlog_preds <- predict(log_fit, test_data, type = \"prob\") %>%   # probabilitas kelas 1\n  bind_cols(predict(log_fit, test_data, type = \"class\")) %>%  # label hasil klasifikasi\n  bind_cols(test_data %>% select(num))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\nprediction from rank-deficient fit; attr(*, \"non-estim\") has doubtful cases\n\nWarning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\nprediction from rank-deficient fit; attr(*, \"non-estim\") has doubtful cases\n```\n\n\n:::\n\n```{.r .cell-code}\n# Metrik umum\nmetrics(log_preds, truth = num, estimate = .pred_class)[1,] # akurasi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.829\n```\n\n\n:::\n\n```{.r .cell-code}\n# Confusion matrix\nconf_mat(log_preds, truth = num, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction  0  1\n         0 37  9\n         1  4 26\n```\n\n\n:::\n\n```{.r .cell-code}\n# ────────────────────────────────────────────────────────────────────────────────\n# 8. Simpan model\n# ────────────────────────────────────────────────────────────────────────────────\nsaveRDS(log_fit, \"results/logreg_R.rda\")\n```\n:::\n\n\n\nAkurasi dari model regresi logistik yang dihasilkan adalah 0.828. Model ini sudah disimpan dalam bentuk file RDS dengan nama `logreg_R.rda`. File ini dapat digunakan untuk memprediksi data baru.\n\n### Algoritma Random Forest\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ── 1. Pustaka & reproducibility ───────────────────────────────────────────────\nset.seed(26)\n\n# ── 2. Train–test split --------------------------------------------------------\nsplit_obj   <- initial_split(df1, prop = 0.75, strata = num)\ntrain_data  <- training(split_obj)\ntest_data   <- testing(split_obj)\n\n# ── 3. Recipe (opsional: praproses) -------------------------------------------\nheart_rec <- \n  recipe(num ~ ., data = train_data) |>\n  step_dummy(all_nominal_predictors(), one_hot = TRUE) |>   # encode faktor\n  step_zv(all_predictors())                                # buang variabel var. 0\n\n# ── 4. Spesifikasi model -------------------------------------------------------\nrf_spec <- \n  rand_forest() |>\n  set_engine(\"randomForest\") |>\n  set_mode(\"classification\")\n\n# ── 5. Workflow ----------------------------------------------------------------\nrf_wf <- workflow() |>\n  add_recipe(heart_rec) |>\n  add_model(rf_spec)\n\n# ── 6. Fit model ---------------------------------------------------------------\nrf_fit <- fit(rf_wf, data = train_data)\n\n# ── 7. Prediksi & evaluasi -----------------------------------------------------\nrf_preds <- predict(rf_fit, test_data) |> \n            bind_cols(test_data |> select(num))\n\nmetrics(rf_preds, truth = num, estimate = .pred_class)[1,] # akurasi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.842\n```\n\n\n:::\n\n```{.r .cell-code}\n# Confusion matrix\nconf_mat(rf_preds, truth = num, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction  0  1\n         0 38  9\n         1  3 26\n```\n\n\n:::\n\n```{.r .cell-code}\n# ── 8. Simpan model --------------------------------------------\nsaveRDS(rf_fit, \"results/rf_R.rda\")\n```\n:::\n\n\n\n\nAkurasi dari model random forest yang dihasilkan adalah 0.842. Model ini sudah disimpan dalam bentuk file RDS dengan nama `rf_R.rda`. File ini dapat digunakan untuk memprediksi data baru.\n\n**Model Terbaik**\n\nModel terbaik dari kedua algoritma yang digunakan adalah model random forest. Model ini yang akan dideploy ke dalam aplikasi Shiny.\n\n## Fitting Model di Python\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load reticulate package\n# Pakckage ini digunakan untuk menghubungkan R dengan Python\nlibrary(reticulate)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\n# Load data\ndf1 = pd.read_csv(\"data/heart.csv\")\ndf1.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   age  sex  cp  trestbps  choi  fbs  ...  exang  oldpeak  slope  ca  thai  num\n0   63    1   1       145   233    1  ...      0      2.3      3   0     6    0\n1   67    1   4       160   286    0  ...      1      1.5      2   3     3    1\n2   67    1   4       120   229    0  ...      1      2.6      2   2     7    1\n3   37    1   3       130   250    0  ...      0      3.5      3   0     3    0\n4   41    0   2       130   204    0  ...      0      1.4      1   0     3    0\n\n[5 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\n# ---- fungsi utilitas -------------------------------------------------------\ndef as_category(series, categories=None):\n    \"\"\"\n    Ubah series ke pandas.Categorical.\n    Jika 'categories' diberikan, urutannya disetel eksplisit (mirip labels R).\n    \"\"\"\n    if categories is not None:\n        return pd.Categorical(series, categories=categories, ordered=False)\n    return series.astype(\"category\")\n\n\n# ---- transformasi tipe -----------------------------------------------------\ndf1 = (\n    df1\n      .assign(\n          age      = lambda x: x[\"age\"].astype(\"int32\"),\n          sex      = lambda x: as_category(x[\"sex\"]),\n          cp       = lambda x: as_category(x[\"cp\"]),\n          trestbps = lambda x: x[\"trestbps\"].astype(\"int32\"),\n          choi     = lambda x: x[\"choi\"].astype(\"int32\"),   # ganti 'choi' → 'chol' bila perlu\n          fbs      = lambda x: as_category(x[\"fbs\"]),\n          restecg  = lambda x: as_category(x[\"restecg\"]),\n          thalach  = lambda x: x[\"thalach\"].astype(\"int32\"),\n          exang    = lambda x: as_category(x[\"exang\"]),\n          oldpeak  = lambda x: pd.to_numeric(x[\"oldpeak\"], errors=\"coerce\"),\n          slope    = lambda x: as_category(x[\"slope\"]),\n          ca       = lambda x: as_category(x[\"ca\"],   categories=[0, 1, 2, 3]),\n          thai     = lambda x: as_category(x[\"thai\"], categories=[3, 6, 7]),\n          num      = lambda x: as_category(x[\"num\"])\n      )\n)\n\n# ---- lihat hasil -----------------------------------------------------------\nprint(df1.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   age sex cp  trestbps  choi fbs  ... exang  oldpeak slope  ca thai num\n0   63   1  1       145   233   1  ...     0      2.3     3   0    6   0\n1   67   1  4       160   286   0  ...     1      1.5     2   3    3   1\n2   67   1  4       120   229   0  ...     1      2.6     2   2    7   1\n3   37   1  3       130   250   0  ...     0      3.5     3   0    3   0\n4   41   0  2       130   204   0  ...     0      1.4     1   0    3   0\n\n[5 rows x 14 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nprint(df1.dtypes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nage            int32\nsex         category\ncp          category\ntrestbps       int32\nchoi           int32\nfbs         category\nrestecg     category\nthalach        int32\nexang       category\noldpeak      float64\nslope       category\nca          category\nthai        category\nnum         category\ndtype: object\n```\n\n\n:::\n:::\n\n\n\nDi Python, kita dapat menggunakan package `scikit-learn` untuk fitting model. Package ini merupakan package yang paling banyak digunakan untuk pemodelan machine learning di Python.\n\n### Algoritma Regresi Logistik\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# ───────────────────────────────────────────────────────────────────────────────\n# 0. Pustaka & reproducibility\n# ───────────────────────────────────────────────────────────────────────────────\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nimport joblib          # untuk simpan / load model\nnp.random.seed(26)\n\n# ───────────────────────────────────────────────────────────────────────────────\n# 1. Train–test split  (stratified, 75 % train)\n# ───────────────────────────────────────────────────────────────────────────────\nX = df1.drop(columns=[\"num\"])\ny = df1[\"num\"]\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y,\n    train_size=0.75,\n    stratify=y,\n    random_state=26\n)\n\n# ───────────────────────────────────────────────────────────────────────────────\n# 2. Pre‑processing (recipe setara)\n#    • One‑hot seluruh kolom kategorik\n#    • Buang prediktor varian 0 (mirip step_zv)\n# ───────────────────────────────────────────────────────────────────────────────\ncat_cols  = X.select_dtypes(include=[\"object\", \"category\"]).columns\nnum_cols  = X.select_dtypes(include=[\"number\"]).columns\n\npreprocess = ColumnTransformer(\n    transformers=[\n        (\"cat\", OneHotEncoder(drop=\"first\", handle_unknown=\"ignore\"), cat_cols),\n        (\"num\", \"passthrough\", num_cols)\n    ]\n)\n\n# ───────────────────────────────────────────────────────────────────────────────\n# 3. Spesifikasi model + Workflow (Pipeline)\n# ───────────────────────────────────────────────────────────────────────────────\nlog_pipeline = Pipeline(steps=[\n    (\"preprocess\", preprocess),\n    (\"nzv\", VarianceThreshold(threshold=0.0)),           # hilangkan varian 0\n    (\"model\", LogisticRegression())\n])\n\n# ───────────────────────────────────────────────────────────────────────────────\n# 4. Fit model\n# ───────────────────────────────────────────────────────────────────────────────\nlog_pipeline.fit(X_train, y_train)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocess&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;cat&#x27;,\n                                                  OneHotEncoder(drop=&#x27;first&#x27;,\n                                                                handle_unknown=&#x27;ignore&#x27;),\n                                                  Index([&#x27;sex&#x27;, &#x27;cp&#x27;, &#x27;fbs&#x27;, &#x27;restecg&#x27;, &#x27;exang&#x27;, &#x27;slope&#x27;, &#x27;ca&#x27;, &#x27;thai&#x27;], dtype=&#x27;object&#x27;)),\n                                                 (&#x27;num&#x27;, &#x27;passthrough&#x27;,\n                                                  Index([&#x27;age&#x27;, &#x27;trestbps&#x27;, &#x27;choi&#x27;, &#x27;thalach&#x27;, &#x27;oldpeak&#x27;], dtype=&#x27;object&#x27;))])),\n                (&#x27;nzv&#x27;, VarianceThreshold()), (&#x27;model&#x27;, LogisticRegression())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocess&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;cat&#x27;,\n                                                  OneHotEncoder(drop=&#x27;first&#x27;,\n                                                                handle_unknown=&#x27;ignore&#x27;),\n                                                  Index([&#x27;sex&#x27;, &#x27;cp&#x27;, &#x27;fbs&#x27;, &#x27;restecg&#x27;, &#x27;exang&#x27;, &#x27;slope&#x27;, &#x27;ca&#x27;, &#x27;thai&#x27;], dtype=&#x27;object&#x27;)),\n                                                 (&#x27;num&#x27;, &#x27;passthrough&#x27;,\n                                                  Index([&#x27;age&#x27;, &#x27;trestbps&#x27;, &#x27;choi&#x27;, &#x27;thalach&#x27;, &#x27;oldpeak&#x27;], dtype=&#x27;object&#x27;))])),\n                (&#x27;nzv&#x27;, VarianceThreshold()), (&#x27;model&#x27;, LogisticRegression())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocess: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;cat&#x27;,\n                                 OneHotEncoder(drop=&#x27;first&#x27;,\n                                               handle_unknown=&#x27;ignore&#x27;),\n                                 Index([&#x27;sex&#x27;, &#x27;cp&#x27;, &#x27;fbs&#x27;, &#x27;restecg&#x27;, &#x27;exang&#x27;, &#x27;slope&#x27;, &#x27;ca&#x27;, &#x27;thai&#x27;], dtype=&#x27;object&#x27;)),\n                                (&#x27;num&#x27;, &#x27;passthrough&#x27;,\n                                 Index([&#x27;age&#x27;, &#x27;trestbps&#x27;, &#x27;choi&#x27;, &#x27;thalach&#x27;, &#x27;oldpeak&#x27;], dtype=&#x27;object&#x27;))])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>Index([&#x27;sex&#x27;, &#x27;cp&#x27;, &#x27;fbs&#x27;, &#x27;restecg&#x27;, &#x27;exang&#x27;, &#x27;slope&#x27;, &#x27;ca&#x27;, &#x27;thai&#x27;], dtype=&#x27;object&#x27;)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(drop=&#x27;first&#x27;, handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>Index([&#x27;age&#x27;, &#x27;trestbps&#x27;, &#x27;choi&#x27;, &#x27;thalach&#x27;, &#x27;oldpeak&#x27;], dtype=&#x27;object&#x27;)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">VarianceThreshold</label><div class=\"sk-toggleable__content\"><pre>VarianceThreshold()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>\n```\n\n:::\n\n```{.python .cell-code}\n# ───────────────────────────────────────────────────────────────────────────────\n# 5. Prediksi & evaluasi\n# ───────────────────────────────────────────────────────────────────────────────\ny_pred  = log_pipeline.predict(X_test)\ny_prob  = log_pipeline.predict_proba(X_test)[:, 1]       # prob kelas 1 (≥ 50 % stenosis)\n\nacc = accuracy_score(y_test, y_pred)\ncm  = confusion_matrix(y_test, y_pred)\n\nprint(f\"Accuracy : {acc:.3f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAccuracy : 0.787\n```\n\n\n:::\n\n```{.python .cell-code}\nprint(\"Confusion matrix:\\n\", cm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion matrix:\n [[32  8]\n [ 8 27]]\n```\n\n\n:::\n\n```{.python .cell-code}\n# ───────────────────────────────────────────────────────────────────────────────\n# 6. Simpan model\n# ───────────────────────────────────────────────────────────────────────────────\njoblib.dump(log_pipeline, \"results/logreg_py.joblib\")   # simpan\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['results/logreg_py.joblib']\n```\n\n\n:::\n:::\n\n\n\n### Algoritma Random Forest\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom sklearn.ensemble import RandomForestClassifier\n\n# reproducibility\nnp.random.seed(26)\n\n# ── 1. Split data (stratified 75 % train) ──────────────────────────────────────\nX = df1.drop(columns=[\"num\"])\ny = df1[\"num\"]\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y,\n    train_size=0.75,\n    stratify=y,\n    random_state=26\n)\n\n# ── 2. Pre‑processing ----------------------------------------------------------\ncat_cols = X.select_dtypes(include=[\"object\", \"category\"]).columns\nnum_cols = X.select_dtypes(include=[\"number\"]).columns\n\npreprocess = ColumnTransformer(\n    transformers=[\n        (\"cat\", OneHotEncoder(drop=\"first\", handle_unknown=\"ignore\"), cat_cols),\n        (\"num\", \"passthrough\", num_cols)\n    ]\n)\n\n# ── 3. Spesifikasi Random Forest -----------------------------------\nrf_model = RandomForestClassifier(\n    random_state=26,\n    n_jobs=-1              # gunakan seluruh core\n)\n\n# ── 4. Pipeline workflow -------------------------------------------------------\nrf_pipeline = Pipeline(steps=[\n    (\"preprocess\", preprocess),\n    (\"nzv\", VarianceThreshold(threshold=0.0)),   # buang varian 0\n    (\"model\", rf_model)\n])\n\n# ── 5. Fit model ---------------------------------------------------------------\nrf_pipeline.fit(X_train, y_train)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocess&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;cat&#x27;,\n                                                  OneHotEncoder(drop=&#x27;first&#x27;,\n                                                                handle_unknown=&#x27;ignore&#x27;),\n                                                  Index([&#x27;sex&#x27;, &#x27;cp&#x27;, &#x27;fbs&#x27;, &#x27;restecg&#x27;, &#x27;exang&#x27;, &#x27;slope&#x27;, &#x27;ca&#x27;, &#x27;thai&#x27;], dtype=&#x27;object&#x27;)),\n                                                 (&#x27;num&#x27;, &#x27;passthrough&#x27;,\n                                                  Index([&#x27;age&#x27;, &#x27;trestbps&#x27;, &#x27;choi&#x27;, &#x27;thalach&#x27;, &#x27;oldpeak&#x27;], dtype=&#x27;object&#x27;))])),\n                (&#x27;nzv&#x27;, VarianceThreshold()),\n                (&#x27;model&#x27;, RandomForestClassifier(n_jobs=-1, random_state=26))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocess&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;cat&#x27;,\n                                                  OneHotEncoder(drop=&#x27;first&#x27;,\n                                                                handle_unknown=&#x27;ignore&#x27;),\n                                                  Index([&#x27;sex&#x27;, &#x27;cp&#x27;, &#x27;fbs&#x27;, &#x27;restecg&#x27;, &#x27;exang&#x27;, &#x27;slope&#x27;, &#x27;ca&#x27;, &#x27;thai&#x27;], dtype=&#x27;object&#x27;)),\n                                                 (&#x27;num&#x27;, &#x27;passthrough&#x27;,\n                                                  Index([&#x27;age&#x27;, &#x27;trestbps&#x27;, &#x27;choi&#x27;, &#x27;thalach&#x27;, &#x27;oldpeak&#x27;], dtype=&#x27;object&#x27;))])),\n                (&#x27;nzv&#x27;, VarianceThreshold()),\n                (&#x27;model&#x27;, RandomForestClassifier(n_jobs=-1, random_state=26))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocess: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;cat&#x27;,\n                                 OneHotEncoder(drop=&#x27;first&#x27;,\n                                               handle_unknown=&#x27;ignore&#x27;),\n                                 Index([&#x27;sex&#x27;, &#x27;cp&#x27;, &#x27;fbs&#x27;, &#x27;restecg&#x27;, &#x27;exang&#x27;, &#x27;slope&#x27;, &#x27;ca&#x27;, &#x27;thai&#x27;], dtype=&#x27;object&#x27;)),\n                                (&#x27;num&#x27;, &#x27;passthrough&#x27;,\n                                 Index([&#x27;age&#x27;, &#x27;trestbps&#x27;, &#x27;choi&#x27;, &#x27;thalach&#x27;, &#x27;oldpeak&#x27;], dtype=&#x27;object&#x27;))])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>Index([&#x27;sex&#x27;, &#x27;cp&#x27;, &#x27;fbs&#x27;, &#x27;restecg&#x27;, &#x27;exang&#x27;, &#x27;slope&#x27;, &#x27;ca&#x27;, &#x27;thai&#x27;], dtype=&#x27;object&#x27;)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(drop=&#x27;first&#x27;, handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>Index([&#x27;age&#x27;, &#x27;trestbps&#x27;, &#x27;choi&#x27;, &#x27;thalach&#x27;, &#x27;oldpeak&#x27;], dtype=&#x27;object&#x27;)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">VarianceThreshold</label><div class=\"sk-toggleable__content\"><pre>VarianceThreshold()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_jobs=-1, random_state=26)</pre></div></div></div></div></div></div></div>\n```\n\n:::\n\n```{.python .cell-code}\n# ── 6. Evaluasi ---------------------------------------------------------------\ny_pred = rf_pipeline.predict(X_test)\nacc    = accuracy_score(y_test, y_pred)\ncm     = confusion_matrix(y_test, y_pred)\n\nprint(f\"Accuracy : {acc:.3f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAccuracy : 0.773\n```\n\n\n:::\n\n```{.python .cell-code}\nprint(\"Confusion matrix:\\n\", cm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion matrix:\n [[33  7]\n [10 25]]\n```\n\n\n:::\n\n```{.python .cell-code}\n# ── 7. Simpan model -----------------------------------------------------------\njoblib.dump(rf_pipeline, \"results/rf_py.joblib\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['results/rf_py.joblib']\n```\n\n\n:::\n:::\n",
    "supporting": [
      "End_to_end_ML_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}